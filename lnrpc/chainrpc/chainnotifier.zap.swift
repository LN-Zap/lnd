//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: chainrpc/chainnotifier.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger

// MARK: - ChainNotifier
protocol ChainNotifierConnection {
  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, completion: @escaping ApiCompletion<Chainrpc_ConfEvent>)
  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, completion: @escaping ApiCompletion<Chainrpc_SpendEvent>)
  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, completion: @escaping ApiCompletion<Chainrpc_BlockEpoch>)
}

#if !REMOTEONLY
class StreamingChainNotifierConnection: ChainNotifierConnection {
  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, completion: @escaping ApiCompletion<Chainrpc_ConfEvent>) {
    LndmobileRegisterConfirmationsNtfn(try? request.serializedData(), LndCallback(completion))
  }
  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, completion: @escaping ApiCompletion<Chainrpc_SpendEvent>) {
    LndmobileRegisterSpendNtfn(try? request.serializedData(), LndCallback(completion))
  }
  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, completion: @escaping ApiCompletion<Chainrpc_BlockEpoch>) {
    LndmobileRegisterBlockEpochNtfn(try? request.serializedData(), LndCallback(completion))
  }
}
#endif

final class RPCChainNotifierConnection: ChainNotifierConnection {
  let service: Chainrpc_ChainNotifierService
      
  public init(configuration: RPCCredentials) {
      service = Chainrpc_ChainNotifierServiceClient(configuration: configuration)
  }

  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, completion: @escaping ApiCompletion<Chainrpc_ConfEvent>) {
    do {
        let call = try service.registerConfirmationsNtfn(request) { Logger.error($0) }
        try receiveRegisterConfirmationsNtfnUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveRegisterConfirmationsNtfnUpdate(call: Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall, completion: @escaping ApiCompletion<Chainrpc_ConfEvent>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveRegisterConfirmationsNtfnUpdate(call: call, completion: completion)
          } catch {}
      }
  }

  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, completion: @escaping ApiCompletion<Chainrpc_SpendEvent>) {
    do {
        let call = try service.registerSpendNtfn(request) { Logger.error($0) }
        try receiveRegisterSpendNtfnUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveRegisterSpendNtfnUpdate(call: Chainrpc_ChainNotifierRegisterSpendNtfnCall, completion: @escaping ApiCompletion<Chainrpc_SpendEvent>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveRegisterSpendNtfnUpdate(call: call, completion: completion)
          } catch {}
      }
  }

  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, completion: @escaping ApiCompletion<Chainrpc_BlockEpoch>) {
    do {
        let call = try service.registerBlockEpochNtfn(request) { Logger.error($0) }
        try receiveRegisterBlockEpochNtfnUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveRegisterBlockEpochNtfnUpdate(call: Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall, completion: @escaping ApiCompletion<Chainrpc_BlockEpoch>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveRegisterBlockEpochNtfnUpdate(call: call, completion: completion)
          } catch {}
      }
  }

}

class MockChainNotifierConnection: ChainNotifierConnection {
  private let registerConfirmationsNtfn: Chainrpc_ConfEvent?
  private let registerSpendNtfn: Chainrpc_SpendEvent?
  private let registerBlockEpochNtfn: Chainrpc_BlockEpoch?

  init(
    registerConfirmationsNtfn: Chainrpc_ConfEvent? = nil,
    registerSpendNtfn: Chainrpc_SpendEvent? = nil,
    registerBlockEpochNtfn: Chainrpc_BlockEpoch? = nil
  ) {
    self.registerConfirmationsNtfn = registerConfirmationsNtfn
    self.registerSpendNtfn = registerSpendNtfn
    self.registerBlockEpochNtfn = registerBlockEpochNtfn
  }
  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, completion: @escaping ApiCompletion<Chainrpc_ConfEvent>) {
    completion(Result(value: registerConfirmationsNtfn, error: LndApiError.unknownError))
  }
  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, completion: @escaping ApiCompletion<Chainrpc_SpendEvent>) {
    completion(Result(value: registerSpendNtfn, error: LndApiError.unknownError))
  }
  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, completion: @escaping ApiCompletion<Chainrpc_BlockEpoch>) {
    completion(Result(value: registerBlockEpochNtfn, error: LndApiError.unknownError))
  }
}
