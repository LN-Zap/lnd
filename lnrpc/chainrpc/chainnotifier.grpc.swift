//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chainrpc/chainnotifier.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Chainrpc_ConfEvent?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Chainrpc_ConfEvent?>) -> Void) throws
}

internal extension Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Chainrpc_ConfEvent? { return try self._receive(timeout: timeout) }
}

fileprivate final class Chainrpc_ChainNotifierRegisterConfirmationsNtfnCallBase: ClientCallServerStreamingBase<Chainrpc_ConfRequest, Chainrpc_ConfEvent>, Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall {
  override class var method: String { return "/chainrpc.ChainNotifier/RegisterConfirmationsNtfn" }
}

internal protocol Chainrpc_ChainNotifierRegisterSpendNtfnCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Chainrpc_SpendEvent?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Chainrpc_SpendEvent?>) -> Void) throws
}

internal extension Chainrpc_ChainNotifierRegisterSpendNtfnCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Chainrpc_SpendEvent? { return try self._receive(timeout: timeout) }
}

fileprivate final class Chainrpc_ChainNotifierRegisterSpendNtfnCallBase: ClientCallServerStreamingBase<Chainrpc_SpendRequest, Chainrpc_SpendEvent>, Chainrpc_ChainNotifierRegisterSpendNtfnCall {
  override class var method: String { return "/chainrpc.ChainNotifier/RegisterSpendNtfn" }
}

internal protocol Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Chainrpc_BlockEpoch?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Chainrpc_BlockEpoch?>) -> Void) throws
}

internal extension Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Chainrpc_BlockEpoch? { return try self._receive(timeout: timeout) }
}

fileprivate final class Chainrpc_ChainNotifierRegisterBlockEpochNtfnCallBase: ClientCallServerStreamingBase<Chainrpc_BlockEpoch, Chainrpc_BlockEpoch>, Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall {
  override class var method: String { return "/chainrpc.ChainNotifier/RegisterBlockEpochNtfn" }
}


/// Instantiate Chainrpc_ChainNotifierServiceClient, then call methods of this protocol to make API calls.
internal protocol Chainrpc_ChainNotifierService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterSpendNtfnCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall

}

internal extension Chainrpc_ChainNotifierService {
  /// Asynchronous. Server-streaming.
  func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall {
    return try self.registerConfirmationsNtfn(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func registerSpendNtfn(_ request: Chainrpc_SpendRequest, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterSpendNtfnCall {
    return try self.registerSpendNtfn(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall {
    return try self.registerBlockEpochNtfn(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Chainrpc_ChainNotifierServiceClient: ServiceClientBase, Chainrpc_ChainNotifierService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func registerConfirmationsNtfn(_ request: Chainrpc_ConfRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterConfirmationsNtfnCall {
    return try Chainrpc_ChainNotifierRegisterConfirmationsNtfnCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func registerSpendNtfn(_ request: Chainrpc_SpendRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterSpendNtfnCall {
    return try Chainrpc_ChainNotifierRegisterSpendNtfnCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func registerBlockEpochNtfn(_ request: Chainrpc_BlockEpoch, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Chainrpc_ChainNotifierRegisterBlockEpochNtfnCall {
    return try Chainrpc_ChainNotifierRegisterBlockEpochNtfnCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

