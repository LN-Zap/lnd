//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: autopilotrpc/autopilot.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger

// MARK: - Autopilot
protocol AutopilotConnection {
  func status(_ request: Autopilotrpc_StatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_StatusResponse>)
  func modifyStatus(_ request: Autopilotrpc_ModifyStatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_ModifyStatusResponse>)
  func queryScores(_ request: Autopilotrpc_QueryScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_QueryScoresResponse>)
  func setScores(_ request: Autopilotrpc_SetScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_SetScoresResponse>)
}

#if !REMOTEONLY
class StreamingAutopilotConnection: AutopilotConnection {
  func status(_ request: Autopilotrpc_StatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_StatusResponse>) {
    LndmobileStatus(try? request.serializedData(), LndCallback(completion))
  }
  func modifyStatus(_ request: Autopilotrpc_ModifyStatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_ModifyStatusResponse>) {
    LndmobileModifyStatus(try? request.serializedData(), LndCallback(completion))
  }
  func queryScores(_ request: Autopilotrpc_QueryScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_QueryScoresResponse>) {
    LndmobileQueryScores(try? request.serializedData(), LndCallback(completion))
  }
  func setScores(_ request: Autopilotrpc_SetScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_SetScoresResponse>) {
    LndmobileSetScores(try? request.serializedData(), LndCallback(completion))
  }
}
#endif

final class RPCAutopilotConnection: AutopilotConnection {
  let service: Autopilotrpc_AutopilotService
      
  public init(configuration: RPCCredentials) {
      service = Autopilotrpc_AutopilotServiceClient(configuration: configuration)
  }

  func status(_ request: Autopilotrpc_StatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_StatusResponse>) {
    _ = try? service.status(request, completion: createHandler(completion))
  }

  func modifyStatus(_ request: Autopilotrpc_ModifyStatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_ModifyStatusResponse>) {
    _ = try? service.modifyStatus(request, completion: createHandler(completion))
  }

  func queryScores(_ request: Autopilotrpc_QueryScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_QueryScoresResponse>) {
    _ = try? service.queryScores(request, completion: createHandler(completion))
  }

  func setScores(_ request: Autopilotrpc_SetScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_SetScoresResponse>) {
    _ = try? service.setScores(request, completion: createHandler(completion))
  }

}

class MockAutopilotConnection: AutopilotConnection {
  private let status: Autopilotrpc_StatusResponse?
  private let modifyStatus: Autopilotrpc_ModifyStatusResponse?
  private let queryScores: Autopilotrpc_QueryScoresResponse?
  private let setScores: Autopilotrpc_SetScoresResponse?

  init(
    status: Autopilotrpc_StatusResponse? = nil,
    modifyStatus: Autopilotrpc_ModifyStatusResponse? = nil,
    queryScores: Autopilotrpc_QueryScoresResponse? = nil,
    setScores: Autopilotrpc_SetScoresResponse? = nil
  ) {
    self.status = status
    self.modifyStatus = modifyStatus
    self.queryScores = queryScores
    self.setScores = setScores
  }
  func status(_ request: Autopilotrpc_StatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_StatusResponse>) {
    completion(Result(value: status, error: LndApiError.unknownError))
  }
  func modifyStatus(_ request: Autopilotrpc_ModifyStatusRequest, completion: @escaping ApiCompletion<Autopilotrpc_ModifyStatusResponse>) {
    completion(Result(value: modifyStatus, error: LndApiError.unknownError))
  }
  func queryScores(_ request: Autopilotrpc_QueryScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_QueryScoresResponse>) {
    completion(Result(value: queryScores, error: LndApiError.unknownError))
  }
  func setScores(_ request: Autopilotrpc_SetScoresRequest, completion: @escaping ApiCompletion<Autopilotrpc_SetScoresResponse>) {
    completion(Result(value: setScores, error: LndApiError.unknownError))
  }
}
