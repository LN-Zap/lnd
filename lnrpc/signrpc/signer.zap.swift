//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: signrpc/signer.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger

// MARK: - Signer
protocol SignerConnection {
  func signOutputRaw(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_SignResp>)
  func computeInputScript(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_InputScriptResp>)
}

#if !REMOTEONLY
class StreamingSignerConnection: SignerConnection {
  func signOutputRaw(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_SignResp>) {
    LndmobileSignOutputRaw(try? request.serializedData(), LndCallback(completion))
  }
  func computeInputScript(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_InputScriptResp>) {
    LndmobileComputeInputScript(try? request.serializedData(), LndCallback(completion))
  }
}
#endif

final class RPCSignerConnection: SignerConnection {
  let service: Signrpc_SignerService
      
  public init(configuration: RPCCredentials) {
      service = Signrpc_SignerServiceClient(configuration: configuration)
  }

  func signOutputRaw(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_SignResp>) {
    _ = try? service.signOutputRaw(request, completion: createHandler(completion))
  }

  func computeInputScript(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_InputScriptResp>) {
    _ = try? service.computeInputScript(request, completion: createHandler(completion))
  }

}

class MockSignerConnection: SignerConnection {
  private let signOutputRaw: Signrpc_SignResp?
  private let computeInputScript: Signrpc_InputScriptResp?

  init(
    signOutputRaw: Signrpc_SignResp? = nil,
    computeInputScript: Signrpc_InputScriptResp? = nil
  ) {
    self.signOutputRaw = signOutputRaw
    self.computeInputScript = computeInputScript
  }
  func signOutputRaw(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_SignResp>) {
    completion(Result(value: signOutputRaw, error: LndApiError.unknownError))
  }
  func computeInputScript(_ request: Signrpc_SignReq, completion: @escaping ApiCompletion<Signrpc_InputScriptResp>) {
    completion(Result(value: computeInputScript, error: LndApiError.unknownError))
  }
}
