//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: routerrpc/router.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Routerrpc_RouterSendPaymentCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Routerrpc_PaymentStatus?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Routerrpc_PaymentStatus?>) -> Void) throws
}

internal extension Routerrpc_RouterSendPaymentCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Routerrpc_PaymentStatus? { return try self._receive(timeout: timeout) }
}

fileprivate final class Routerrpc_RouterSendPaymentCallBase: ClientCallServerStreamingBase<Routerrpc_SendPaymentRequest, Routerrpc_PaymentStatus>, Routerrpc_RouterSendPaymentCall {
  override class var method: String { return "/routerrpc.Router/SendPayment" }
}

internal protocol Routerrpc_RouterTrackPaymentCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Routerrpc_PaymentStatus?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Routerrpc_PaymentStatus?>) -> Void) throws
}

internal extension Routerrpc_RouterTrackPaymentCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Routerrpc_PaymentStatus? { return try self._receive(timeout: timeout) }
}

fileprivate final class Routerrpc_RouterTrackPaymentCallBase: ClientCallServerStreamingBase<Routerrpc_TrackPaymentRequest, Routerrpc_PaymentStatus>, Routerrpc_RouterTrackPaymentCall {
  override class var method: String { return "/routerrpc.Router/TrackPayment" }
}

internal protocol Routerrpc_RouterEstimateRouteFeeCall: ClientCallUnary {}

fileprivate final class Routerrpc_RouterEstimateRouteFeeCallBase: ClientCallUnaryBase<Routerrpc_RouteFeeRequest, Routerrpc_RouteFeeResponse>, Routerrpc_RouterEstimateRouteFeeCall {
  override class var method: String { return "/routerrpc.Router/EstimateRouteFee" }
}

internal protocol Routerrpc_RouterSendToRouteCall: ClientCallUnary {}

fileprivate final class Routerrpc_RouterSendToRouteCallBase: ClientCallUnaryBase<Routerrpc_SendToRouteRequest, Routerrpc_SendToRouteResponse>, Routerrpc_RouterSendToRouteCall {
  override class var method: String { return "/routerrpc.Router/SendToRoute" }
}

internal protocol Routerrpc_RouterResetMissionControlCall: ClientCallUnary {}

fileprivate final class Routerrpc_RouterResetMissionControlCallBase: ClientCallUnaryBase<Routerrpc_ResetMissionControlRequest, Routerrpc_ResetMissionControlResponse>, Routerrpc_RouterResetMissionControlCall {
  override class var method: String { return "/routerrpc.Router/ResetMissionControl" }
}

internal protocol Routerrpc_RouterQueryMissionControlCall: ClientCallUnary {}

fileprivate final class Routerrpc_RouterQueryMissionControlCallBase: ClientCallUnaryBase<Routerrpc_QueryMissionControlRequest, Routerrpc_QueryMissionControlResponse>, Routerrpc_RouterQueryMissionControlCall {
  override class var method: String { return "/routerrpc.Router/QueryMissionControl" }
}


/// Instantiate Routerrpc_RouterServiceClient, then call methods of this protocol to make API calls.
internal protocol Routerrpc_RouterService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func sendPayment(_ request: Routerrpc_SendPaymentRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterSendPaymentCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterTrackPaymentCall

  /// Asynchronous. Unary.
  @discardableResult
  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_RouteFeeResponse?, CallResult) -> Void) throws -> Routerrpc_RouterEstimateRouteFeeCall

  /// Asynchronous. Unary.
  @discardableResult
  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_SendToRouteResponse?, CallResult) -> Void) throws -> Routerrpc_RouterSendToRouteCall

  /// Asynchronous. Unary.
  @discardableResult
  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_ResetMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterResetMissionControlCall

  /// Asynchronous. Unary.
  @discardableResult
  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_QueryMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterQueryMissionControlCall

}

internal extension Routerrpc_RouterService {
  /// Asynchronous. Server-streaming.
  func sendPayment(_ request: Routerrpc_SendPaymentRequest, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterSendPaymentCall {
    return try self.sendPayment(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterTrackPaymentCall {
    return try self.trackPayment(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, completion: @escaping (Routerrpc_RouteFeeResponse?, CallResult) -> Void) throws -> Routerrpc_RouterEstimateRouteFeeCall {
    return try self.estimateRouteFee(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, completion: @escaping (Routerrpc_SendToRouteResponse?, CallResult) -> Void) throws -> Routerrpc_RouterSendToRouteCall {
    return try self.sendToRoute(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, completion: @escaping (Routerrpc_ResetMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterResetMissionControlCall {
    return try self.resetMissionControl(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, completion: @escaping (Routerrpc_QueryMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterQueryMissionControlCall {
    return try self.queryMissionControl(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Routerrpc_RouterServiceClient: ServiceClientBase, Routerrpc_RouterService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func sendPayment(_ request: Routerrpc_SendPaymentRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterSendPaymentCall {
    return try Routerrpc_RouterSendPaymentCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func trackPayment(_ request: Routerrpc_TrackPaymentRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Routerrpc_RouterTrackPaymentCall {
    return try Routerrpc_RouterTrackPaymentCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  internal func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_RouteFeeResponse?, CallResult) -> Void) throws -> Routerrpc_RouterEstimateRouteFeeCall {
    return try Routerrpc_RouterEstimateRouteFeeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  internal func sendToRoute(_ request: Routerrpc_SendToRouteRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_SendToRouteResponse?, CallResult) -> Void) throws -> Routerrpc_RouterSendToRouteCall {
    return try Routerrpc_RouterSendToRouteCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  internal func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_ResetMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterResetMissionControlCall {
    return try Routerrpc_RouterResetMissionControlCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Unary.
  @discardableResult
  internal func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, metadata customMetadata: Metadata, completion: @escaping (Routerrpc_QueryMissionControlResponse?, CallResult) -> Void) throws -> Routerrpc_RouterQueryMissionControlCall {
    return try Routerrpc_RouterQueryMissionControlCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

