//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: routerrpc/router.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger

// MARK: - Router
protocol RouterConnection {
  func sendPayment(_ request: Routerrpc_SendPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>)
  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>)
  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, completion: @escaping ApiCompletion<Routerrpc_RouteFeeResponse>)
  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Routerrpc_SendToRouteResponse>)
  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_ResetMissionControlResponse>)
  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_QueryMissionControlResponse>)
}

#if !REMOTEONLY
class StreamingRouterConnection: RouterConnection {
  func sendPayment(_ request: Routerrpc_SendPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    LndmobileSendPayment(try? request.serializedData(), LndCallback(completion))
  }
  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    LndmobileTrackPayment(try? request.serializedData(), LndCallback(completion))
  }
  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, completion: @escaping ApiCompletion<Routerrpc_RouteFeeResponse>) {
    LndmobileEstimateRouteFee(try? request.serializedData(), LndCallback(completion))
  }
  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Routerrpc_SendToRouteResponse>) {
    LndmobileSendToRoute(try? request.serializedData(), LndCallback(completion))
  }
  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_ResetMissionControlResponse>) {
    LndmobileResetMissionControl(try? request.serializedData(), LndCallback(completion))
  }
  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_QueryMissionControlResponse>) {
    LndmobileQueryMissionControl(try? request.serializedData(), LndCallback(completion))
  }
}
#endif

final class RPCRouterConnection: RouterConnection {
  let service: Routerrpc_RouterService
      
  public init(configuration: RPCCredentials) {
      service = Routerrpc_RouterServiceClient(configuration: configuration)
  }

  func sendPayment(_ request: Routerrpc_SendPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    do {
        let call = try service.sendPayment(request) { Logger.error($0) }
        try receiveSendPaymentUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveSendPaymentUpdate(call: Routerrpc_RouterSendPaymentCall, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveSendPaymentUpdate(call: call, completion: completion)
          } catch {}
      }
  }

  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    do {
        let call = try service.trackPayment(request) { Logger.error($0) }
        try receiveTrackPaymentUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveTrackPaymentUpdate(call: Routerrpc_RouterTrackPaymentCall, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveTrackPaymentUpdate(call: call, completion: completion)
          } catch {}
      }
  }

  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, completion: @escaping ApiCompletion<Routerrpc_RouteFeeResponse>) {
    _ = try? service.estimateRouteFee(request, completion: createHandler(completion))
  }

  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Routerrpc_SendToRouteResponse>) {
    _ = try? service.sendToRoute(request, completion: createHandler(completion))
  }

  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_ResetMissionControlResponse>) {
    _ = try? service.resetMissionControl(request, completion: createHandler(completion))
  }

  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_QueryMissionControlResponse>) {
    _ = try? service.queryMissionControl(request, completion: createHandler(completion))
  }

}

class MockRouterConnection: RouterConnection {
  private let sendPayment: Routerrpc_PaymentStatus?
  private let trackPayment: Routerrpc_PaymentStatus?
  private let estimateRouteFee: Routerrpc_RouteFeeResponse?
  private let sendToRoute: Routerrpc_SendToRouteResponse?
  private let resetMissionControl: Routerrpc_ResetMissionControlResponse?
  private let queryMissionControl: Routerrpc_QueryMissionControlResponse?

  init(
    sendPayment: Routerrpc_PaymentStatus? = nil,
    trackPayment: Routerrpc_PaymentStatus? = nil,
    estimateRouteFee: Routerrpc_RouteFeeResponse? = nil,
    sendToRoute: Routerrpc_SendToRouteResponse? = nil,
    resetMissionControl: Routerrpc_ResetMissionControlResponse? = nil,
    queryMissionControl: Routerrpc_QueryMissionControlResponse? = nil
  ) {
    self.sendPayment = sendPayment
    self.trackPayment = trackPayment
    self.estimateRouteFee = estimateRouteFee
    self.sendToRoute = sendToRoute
    self.resetMissionControl = resetMissionControl
    self.queryMissionControl = queryMissionControl
  }
  func sendPayment(_ request: Routerrpc_SendPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    completion(Result(value: sendPayment, error: LndApiError.unknownError))
  }
  func trackPayment(_ request: Routerrpc_TrackPaymentRequest, completion: @escaping ApiCompletion<Routerrpc_PaymentStatus>) {
    completion(Result(value: trackPayment, error: LndApiError.unknownError))
  }
  func estimateRouteFee(_ request: Routerrpc_RouteFeeRequest, completion: @escaping ApiCompletion<Routerrpc_RouteFeeResponse>) {
    completion(Result(value: estimateRouteFee, error: LndApiError.unknownError))
  }
  func sendToRoute(_ request: Routerrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Routerrpc_SendToRouteResponse>) {
    completion(Result(value: sendToRoute, error: LndApiError.unknownError))
  }
  func resetMissionControl(_ request: Routerrpc_ResetMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_ResetMissionControlResponse>) {
    completion(Result(value: resetMissionControl, error: LndApiError.unknownError))
  }
  func queryMissionControl(_ request: Routerrpc_QueryMissionControlRequest, completion: @escaping ApiCompletion<Routerrpc_QueryMissionControlResponse>) {
    completion(Result(value: queryMissionControl, error: LndApiError.unknownError))
  }
}
