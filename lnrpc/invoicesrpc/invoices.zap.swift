//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: invoicesrpc/invoices.proto
//

#if !REMOTEONLY
import Lndmobile
#endif
import Logger

// MARK: - Invoices
protocol InvoicesConnection {
  func subscribeSingleInvoice(_ request: Invoicesrpc_SubscribeSingleInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_Invoice>)
  func cancelInvoice(_ request: Invoicesrpc_CancelInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_CancelInvoiceResp>)
  func addHoldInvoice(_ request: Invoicesrpc_AddHoldInvoiceRequest, completion: @escaping ApiCompletion<Invoicesrpc_AddHoldInvoiceResp>)
  func settleInvoice(_ request: Invoicesrpc_SettleInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_SettleInvoiceResp>)
}

#if !REMOTEONLY
class StreamingInvoicesConnection: InvoicesConnection {
  func subscribeSingleInvoice(_ request: Invoicesrpc_SubscribeSingleInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
    LndmobileSubscribeSingleInvoice(try? request.serializedData(), LndCallback(completion))
  }
  func cancelInvoice(_ request: Invoicesrpc_CancelInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_CancelInvoiceResp>) {
    LndmobileCancelInvoice(try? request.serializedData(), LndCallback(completion))
  }
  func addHoldInvoice(_ request: Invoicesrpc_AddHoldInvoiceRequest, completion: @escaping ApiCompletion<Invoicesrpc_AddHoldInvoiceResp>) {
    LndmobileAddHoldInvoice(try? request.serializedData(), LndCallback(completion))
  }
  func settleInvoice(_ request: Invoicesrpc_SettleInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_SettleInvoiceResp>) {
    LndmobileSettleInvoice(try? request.serializedData(), LndCallback(completion))
  }
}
#endif

final class RPCInvoicesConnection: InvoicesConnection {
  let service: Invoicesrpc_InvoicesService
      
  public init(configuration: RPCCredentials) {
      service = Invoicesrpc_InvoicesServiceClient(configuration: configuration)
  }

  func subscribeSingleInvoice(_ request: Invoicesrpc_SubscribeSingleInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
    do {
        let call = try service.subscribeSingleInvoice(request) { Logger.error($0) }
        try receiveSubscribeSingleInvoiceUpdate(call: call, completion: completion)
    } catch {
        Logger.error(error)
    }
  }
  private func receiveSubscribeSingleInvoiceUpdate(call: Invoicesrpc_InvoicesSubscribeSingleInvoiceCall, completion: @escaping ApiCompletion<Lnrpc_Invoice>) throws {
      try call.receive { [weak self] in
          do {
              try handleStreamResult($0, completion: completion)
              try self?.receiveSubscribeSingleInvoiceUpdate(call: call, completion: completion)
          } catch {}
      }
  }

  func cancelInvoice(_ request: Invoicesrpc_CancelInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_CancelInvoiceResp>) {
    _ = try? service.cancelInvoice(request, completion: createHandler(completion))
  }

  func addHoldInvoice(_ request: Invoicesrpc_AddHoldInvoiceRequest, completion: @escaping ApiCompletion<Invoicesrpc_AddHoldInvoiceResp>) {
    _ = try? service.addHoldInvoice(request, completion: createHandler(completion))
  }

  func settleInvoice(_ request: Invoicesrpc_SettleInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_SettleInvoiceResp>) {
    _ = try? service.settleInvoice(request, completion: createHandler(completion))
  }

}

class MockInvoicesConnection: InvoicesConnection {
  private let subscribeSingleInvoice: Lnrpc_Invoice?
  private let cancelInvoice: Invoicesrpc_CancelInvoiceResp?
  private let addHoldInvoice: Invoicesrpc_AddHoldInvoiceResp?
  private let settleInvoice: Invoicesrpc_SettleInvoiceResp?

  init(
    subscribeSingleInvoice: Lnrpc_Invoice? = nil,
    cancelInvoice: Invoicesrpc_CancelInvoiceResp? = nil,
    addHoldInvoice: Invoicesrpc_AddHoldInvoiceResp? = nil,
    settleInvoice: Invoicesrpc_SettleInvoiceResp? = nil
  ) {
    self.subscribeSingleInvoice = subscribeSingleInvoice
    self.cancelInvoice = cancelInvoice
    self.addHoldInvoice = addHoldInvoice
    self.settleInvoice = settleInvoice
  }
  func subscribeSingleInvoice(_ request: Invoicesrpc_SubscribeSingleInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
    completion(Result(value: subscribeSingleInvoice, error: LndApiError.unknownError))
  }
  func cancelInvoice(_ request: Invoicesrpc_CancelInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_CancelInvoiceResp>) {
    completion(Result(value: cancelInvoice, error: LndApiError.unknownError))
  }
  func addHoldInvoice(_ request: Invoicesrpc_AddHoldInvoiceRequest, completion: @escaping ApiCompletion<Invoicesrpc_AddHoldInvoiceResp>) {
    completion(Result(value: addHoldInvoice, error: LndApiError.unknownError))
  }
  func settleInvoice(_ request: Invoicesrpc_SettleInvoiceMsg, completion: @escaping ApiCompletion<Invoicesrpc_SettleInvoiceResp>) {
    completion(Result(value: settleInvoice, error: LndApiError.unknownError))
  }
}
